<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML5新属性</title>
    <url>/2023/10/02/html/HTML5%E6%96%B0%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="HTML5-新属性"><a href="#HTML5-新属性" class="headerlink" title="HTML5 新属性"></a>HTML5 新属性</h1><h2 id="一、新增媒体属性"><a href="#一、新增媒体属性" class="headerlink" title="一、新增媒体属性"></a>一、新增媒体属性</h2><ul>
<li>audio——定义声音或音乐内容。</li>
<li>video——定义视频或影片内容。</li>
<li>embed——定义外部应用程序的容器（比如插件）。</li>
<li>source——定义&lt;video&gt;和&lt;audio&gt;的来源。</li>
<li>track——定义&lt;video&gt;和&lt;audio&gt;的轨道。</li>
</ul>
<h2 id="二、input-新增类型"><a href="#二、input-新增类型" class="headerlink" title="二、input 新增类型"></a>二、input 新增类型</h2><h3 id="1、时间类型"><a href="#1、时间类型" class="headerlink" title="1、时间类型"></a>1、时间类型</h3><ul>
<li>type&#x3D;”date” 表示选择年、月、日,可选择，可手输</li>
<li>type&#x3D;”month” 表示选择年、月</li>
<li>type&#x3D;”week” 表示选择年、周</li>
<li>type&#x3D;”time” 表示选择具体时间，只有时和分钟</li>
<li>type&#x3D;”datetime 表示选择年、月、日、时间(指的是 UTC 时间，格林威治时间) ,Chrome、Firefox 或 Internet Explorer 不支持 type&#x3D;”datetime”。</li>
<li>type&#x3D;”<strong>datetime-local “</strong> 表示选择年、月、日、时间（本地时间，即电脑设置时间）</li>
</ul>
<p>还有例如 url、email、search、number、search 等类型</p>
<h2 id="三、语义化标签"><a href="#三、语义化标签" class="headerlink" title="三、语义化标签"></a>三、语义化标签</h2><ul>
<li>&lt;article&gt;——定义页面独立的内容区域。</li>
<li>&lt;aside&gt;——定义页面的侧边栏内容。</li>
<li>&lt;footer&gt;——定义 section 或 document （文档）的页脚。</li>
<li>&lt;header&gt;——定义文档的头部区域。</li>
<li>&lt;nav&gt;——定义导航链接的部分。</li>
<li>&lt;section&gt;——定义文档中的每一节（区段）。</li>
<li>&lt;time&gt;——定义日期或时间。</li>
<li>&lt;progress&gt;——定义任务进度。</li>
<li>&lt;main&gt;——定义文档的主内容。</li>
<li>&lt;details&gt;——定义用户可查看或隐藏的额外细节。</li>
<li>&lt;summary&gt;——定义&lt;details&gt;元素的可见标题。</li>
</ul>
<h2 id="四、被删元素"><a href="#四、被删元素" class="headerlink" title="四、被删元素"></a>四、被删元素</h2><ul>
<li>&lt;acronym&gt;</li>
<li>&lt;applet&gt;</li>
<li>&lt;basefont&gt;</li>
<li>&lt;big&gt;</li>
<li>&lt;center&gt;</li>
<li>&lt;dir&gt;</li>
<li>&lt;font&gt;</li>
<li>&lt;frame&gt;</li>
<li>&lt;frameset&gt;</li>
<li>&lt;noframes&gt;</li>
<li>&lt;strike&gt;</li>
<li>&lt;tt&gt;</li>
</ul>
<h2 id="五、新增图像"><a href="#五、新增图像" class="headerlink" title="五、新增图像"></a>五、新增图像</h2><ul>
<li>&lt;canvas&gt;——定义使用 JS 的图像绘制。</li>
<li>&lt;svg&gt;——定义使用 SVG 的图像绘制。</li>
</ul>
]]></content>
      <categories>
        <category>html</category>
      </categories>
  </entry>
  <entry>
    <title>分页器</title>
    <url>/2023/10/03/js/%E5%88%86%E9%A1%B5%E5%99%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="原生-js-实现分页器"><a href="#原生-js-实现分页器" class="headerlink" title="原生 js 实现分页器"></a>原生 js 实现分页器</h1><p>分页器通常出现在大量数据分批渲染时，分页器能够帮助我们快速认识当前数据所处位置，那么话不多数，我直接贴代码</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页器（Pagination）优化版 减少了循环次数和dom渲染数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type"> String </span>&#125; dom 页码盒子的选择器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type"> String | Number </span>&#125; total 数据的总长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type"> String | Number </span>&#125; size 一页需要展示的数据大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type"> String | Number </span>&#125; curPage 当前的页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type"> Boolea </span>&#125; isShowPrevNextBtn 是否显示前一页后一页按钮</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type"> String | Number </span>&#125; howPage 需要显示多少个分页标签，最小值为3 默认3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pagination</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 标签选择器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span> = obj.<span class="property">dom</span>;</span><br><span class="line">    <span class="comment">// 数据总长度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">total</span> = <span class="title class_">Number</span>(obj.<span class="property">total</span>);</span><br><span class="line">    <span class="comment">// 每一页显示多少数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="title class_">Number</span>(obj.<span class="property">size</span>) || <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 总共有多少页</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">totalPage</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">total</span> / <span class="variable language_">this</span>.<span class="property">size</span>);</span><br><span class="line">    <span class="comment">// 现在在那一页</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curPage</span> = <span class="title class_">Number</span>(obj.<span class="property">curPage</span>) || <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 是否显示上一页下一页</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isShowPrevNextBtn</span> = obj.<span class="property">isShowPrevNextBtn</span> || <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 上一页下一页按钮的类名</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">btnClass</span> = obj.<span class="property">btnClass</span> || <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 子元素的类名</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chilClass</span> = obj.<span class="property">chilClass</span> || <span class="string">&quot;page-item&quot;</span>;</span><br><span class="line">    <span class="comment">// 当前选中的类名</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">activeClass</span> = obj.<span class="property">activeClass</span> || <span class="string">&quot;active&quot;</span>;</span><br><span class="line">    <span class="comment">// 超链接点击的地址</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">link</span> = obj.<span class="property">link</span> || <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    <span class="comment">// 是否需要搜索跳转</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isShowSearch</span> = obj.<span class="property">isShowSearch</span> || <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 搜索跳转的类名</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">searchClass</span> = obj.<span class="property">searchClass</span> || <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 最多显示多少个分页标签</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">howPage</span> = <span class="variable language_">this</span>.<span class="title function_">handleHowPage</span>(obj.<span class="property">howPage</span>);</span><br><span class="line">    <span class="comment">// 需要执行的回调函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbalck</span> = obj.<span class="property">callbalck</span> || <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成页码</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">curPage</span> &gt; <span class="variable language_">this</span>.<span class="property">totalPage</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;当前页码超过最大页码&quot;</span>);</span><br><span class="line">    <span class="comment">// 总的数据小于一页数据没必要分页</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">total</span> &lt; <span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> page = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">dom</span>);</span><br><span class="line">    page.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 添加上一页的按钮</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isShowPrevNextBtn</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> prevBtn = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">      prevBtn.<span class="property">innerText</span> = <span class="string">&quot;上一页&quot;</span>;</span><br><span class="line">      prevBtn.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="variable language_">this</span>.<span class="property">btnClass</span>?.<span class="property">prev</span> || <span class="string">&quot;btn prev&quot;</span>);</span><br><span class="line">      prevBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">prevPage</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">      page.<span class="title function_">appendChild</span>(prevBtn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">chilClass</span>);</span><br><span class="line">    a.<span class="property">innerHTML</span> = <span class="string">`1`</span>;</span><br><span class="line">    a.<span class="title function_">setAttribute</span>(<span class="string">&quot;href&quot;</span>, <span class="variable language_">this</span>.<span class="property">link</span> + <span class="number">1</span>);</span><br><span class="line">    page.<span class="title function_">appendChild</span>(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="variable language_">this</span>.<span class="property">totalPage</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">      a.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">chilClass</span>);</span><br><span class="line">      a.<span class="property">innerHTML</span> = <span class="string">`<span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line">      a.<span class="title function_">setAttribute</span>(<span class="string">&quot;href&quot;</span>, <span class="variable language_">this</span>.<span class="property">link</span> + i);</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (<span class="variable language_">this</span>.<span class="property">curPage</span> !== i &amp;&amp; <span class="variable language_">this</span>.<span class="property">curPage</span> - i &gt; <span class="variable language_">this</span>.<span class="property">howPage</span>.<span class="property">front</span>) ||</span><br><span class="line">        (i - <span class="variable language_">this</span>.<span class="property">curPage</span> &gt; <span class="variable language_">this</span>.<span class="property">howPage</span>.<span class="property">behind</span> &amp;&amp; i !== <span class="variable language_">this</span>.<span class="property">totalPage</span>) ||</span><br><span class="line">        i === <span class="number">1</span></span><br><span class="line">      )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      page.<span class="title function_">appendChild</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> chils = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">`.<span class="subst">$&#123;<span class="variable language_">this</span>.chilClass&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// 添加前面的省略号</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">curPage</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> dot = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">      dot.<span class="property">innerText</span> = <span class="string">&quot;···&quot;</span>;</span><br><span class="line">      dot.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">chilClass</span>);</span><br><span class="line">      dot.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">goToFront</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">      page.<span class="title function_">insertBefore</span>(dot, chils[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加后面的省略号</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">totalPage</span> - <span class="variable language_">this</span>.<span class="property">curPage</span> &gt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> dot = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">      dot.<span class="property">innerText</span> = <span class="string">&quot;···&quot;</span>;</span><br><span class="line">      dot.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">chilClass</span>);</span><br><span class="line">      dot.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">goToBehind</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">      page.<span class="title function_">insertBefore</span>(dot, chils[chils.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加下一页的按钮</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isShowPrevNextBtn</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> nextBtn = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">      nextBtn.<span class="property">innerText</span> = <span class="string">&quot;下一页&quot;</span>;</span><br><span class="line">      nextBtn.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="variable language_">this</span>.<span class="property">btnClass</span>?.<span class="property">next</span> || <span class="string">&quot;btn next&quot;</span>);</span><br><span class="line">      nextBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">nextPage</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">      page.<span class="title function_">appendChild</span>(nextBtn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加搜索</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isShowSearch</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> search = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">      search.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="variable language_">this</span>.<span class="property">searchClass</span> || <span class="string">&quot;search&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> timer;</span><br><span class="line">      <span class="keyword">let</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      search.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        text += e.<span class="property">data</span>;</span><br><span class="line">        <span class="comment">// 简单防抖</span></span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">gotoPage</span>(text);</span><br><span class="line">        &#125;, <span class="number">800</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      page.<span class="title function_">appendChild</span>(search);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为选中的元素添加类名</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.&quot;</span> + <span class="variable language_">this</span>.<span class="property">chilClass</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">el, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (el.<span class="property">innerText</span> !== <span class="string">&quot;···&quot;</span>) &#123;</span><br><span class="line">        el.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">callbalck</span>) <span class="variable language_">this</span>.<span class="title function_">callbalck</span>(el.<span class="property">innerText</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">gotoPage</span>(el.<span class="property">innerText</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span>(el.<span class="property">innerText</span>) === <span class="variable language_">this</span>.<span class="property">curPage</span>) &#123;</span><br><span class="line">        el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">activeClass</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="variable language_">this</span>.<span class="property">activeClass</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">goToUrl</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span> = <span class="variable language_">this</span>.<span class="property">link</span> + <span class="variable language_">this</span>.<span class="property">curPage</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 跳转页面</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">num</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">gotoPage</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pageNum = <span class="title class_">Number</span>(num);</span><br><span class="line">    <span class="keyword">if</span> (pageNum === <span class="variable language_">this</span>.<span class="property">curPage</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curPage</span> = pageNum;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">goToUrl</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 向后前进</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; num 前进多少格</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">nextPage</span>(<span class="params">num = <span class="number">1</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pageNum = <span class="title class_">Number</span>(num);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">curPage</span> === <span class="variable language_">this</span>.<span class="property">totalPage</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curPage</span> += pageNum;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">goToUrl</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 向前前进</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; num 前进多少格</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">prevPage</span>(<span class="params">num = <span class="number">1</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pageNum = <span class="title class_">Number</span>(num);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">curPage</span> === <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curPage</span> -= pageNum;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">goToUrl</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 跳转到第二条</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">goToFront</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curPage</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">goToUrl</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 跳转到倒数第二条</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">goToBehind</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curPage</span> = <span class="variable language_">this</span>.<span class="property">totalPage</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">goToUrl</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理最多显示多少页的数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">num</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">handleHowPage</span>(<span class="params">num = <span class="number">3</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = &#123;</span><br><span class="line">      <span class="attr">front</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">behind</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!num || num &lt;= <span class="number">3</span> || num &gt;= <span class="variable language_">this</span>.<span class="property">totalPage</span>) &#123;</span><br><span class="line">      result.<span class="property">front</span> = <span class="number">1</span>;</span><br><span class="line">      result.<span class="property">behind</span> = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> isEvenNumber = num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> half = <span class="title class_">Math</span>.<span class="title function_">floor</span>(num / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (isEvenNumber) &#123;</span><br><span class="line">      result.<span class="property">front</span> = half - <span class="number">1</span>;</span><br><span class="line">      result.<span class="property">behind</span> = half;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="property">front</span> = half - <span class="number">1</span>;</span><br><span class="line">      result.<span class="property">behind</span> = half + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6模块化使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Pagination</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// node模块化使用</span></span><br><span class="line"><span class="comment">// module.exports = Pagination;</span></span><br></pre></td></tr></table></figure>

<p>当然其中不乏还有很多可以优化的地方，比如每一个页码的事件绑定换成事件委托加 dataset 的方式，减少性能消耗，再比如增加配置项决定是否需要连接跳转</p>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>简单样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child-ele</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.displaynone</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">cursor</span>: default;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.active</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Pagination</span>(&#123;</span><br><span class="line">  <span class="attr">dom</span>: <span class="string">&quot;.page&quot;</span>,</span><br><span class="line">  <span class="attr">chilClass</span>: <span class="string">&quot;child-ele&quot;</span>,</span><br><span class="line">  <span class="comment">// link:&#x27;http://localhost:8000/?page=&#x27;,</span></span><br><span class="line">  <span class="attr">total</span>: <span class="number">800</span>,</span><br><span class="line">  <span class="attr">size</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">curPage</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">isShowPrevNextBtn</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">btnClass</span>: &#123;</span><br><span class="line">    <span class="attr">prev</span>: <span class="string">&quot;prev-btn&quot;</span>,</span><br><span class="line">    <span class="attr">next</span>: <span class="string">&quot;next-btn&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">isShowSearch</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// searchClass:&#x27;search&#x27;,</span></span><br><span class="line">  <span class="attr">active</span>: <span class="string">&quot;active&quot;</span>,</span><br><span class="line">  <span class="comment">// callbalck:callbalck,</span></span><br><span class="line">  <span class="comment">// howPage:4</span></span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>

<p>实现效果</p>
<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202307121951944.png" alt="image-20230712193900615" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>::: tip 碎碎念</p>
<p>可能会有人这么觉得，现在 UI 框架都有这些，而且实现的还比我好，为什么我还要手写，我想说的是，手写能够帮助我们了解其基本原理，毕竟只有知道原理才能在代码世界获得自由！</p>
<p>:::</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>发布订阅模式</title>
    <url>/2023/10/03/js/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="发布订阅模式的简单实现"><a href="#发布订阅模式的简单实现" class="headerlink" title="发布订阅模式的简单实现"></a>发布订阅模式的简单实现</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>首先我们需要知道什么是发布订阅模式（<strong>Publish-Subscribe Pattern</strong>），如果你会使用 vue 或 react 这两个常用的前端框架的话，那么你对这个设计模式一定不会陌生，在框架中我们常用的事件总线就是这个模式的经典形态（<strong>Event bus</strong>）。</p>
<p><img src="//images.weserv.nl/?url=https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202307241618629.png" alt="基本关系" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>以上是一个简单的示意图，可以粗暴的将<strong>事件池</strong>理解为邮箱，<strong>发布者</strong>为信使，<strong>订阅者</strong>是等待收报纸的你，信使会将信件放在一个大的邮箱里，你及其他订阅者会在这个大邮箱里找到自己订阅的报纸，就是这么简单。</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>通过上面的描述我们知道，发布订阅模式重要的有两个步骤，那就是放进去拿出来，那接下来就让我们一起看看怎么放和怎么拿。</p>
<h3 id="1、搭建整体框架"><a href="#1、搭建整体框架" class="headerlink" title="1、搭建整体框架"></a>1、搭建整体框架</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PubSub</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 事件池</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subscribers</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 发布者</span></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">key, data, thisArg</span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 订阅者</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">key, event</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">off</span>(<span class="params">key, event</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、实现发布者"><a href="#2、实现发布者" class="headerlink" title="2、实现发布者"></a>2、实现发布者</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">emit</span>(<span class="params">key, data, thisArg</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> curSubs = <span class="variable language_">this</span>.<span class="property">subscribers</span>[key];</span><br><span class="line">    thisArg = thisArg || <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!curSubs) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> event <span class="keyword">of</span> curSubs) &#123;</span><br><span class="line">      event.<span class="title function_">call</span>(thisArg, data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、实现订阅者"><a href="#3、实现订阅者" class="headerlink" title="3、实现订阅者"></a>3、实现订阅者</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">on</span>(<span class="params">key, event</span>) &#123;</span><br><span class="line">    <span class="comment">// 拿到当前发布的消息</span></span><br><span class="line">    <span class="keyword">let</span> curSub = <span class="variable language_">this</span>.<span class="property">subscribers</span>[key];</span><br><span class="line">    <span class="comment">// 是否存在消息</span></span><br><span class="line">    <span class="keyword">if</span> (!curSub) curSub = [];</span><br><span class="line">    curSub.<span class="title function_">push</span>(event);</span><br><span class="line">    <span class="comment">// 最后统一修改数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subscribers</span>[key] = curSub;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、取消订阅"><a href="#4、取消订阅" class="headerlink" title="4、取消订阅"></a>4、取消订阅</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">off</span>(<span class="params">key, event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> curSubs = <span class="variable language_">this</span>.<span class="property">subscribers</span>[key];</span><br><span class="line">    <span class="keyword">if</span> (!curSubs) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> idx = curSubs.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> event === e);</span><br><span class="line">      <span class="keyword">if</span> (idx === -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">      curSubs.<span class="title function_">splice</span>(idx, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subscribers</span>[key] = curSubs;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、测试代码"><a href="#5、测试代码" class="headerlink" title="5、测试代码"></a>5、测试代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">PubSub</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">word</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(word);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bus.<span class="title function_">on</span>(<span class="string">&quot;test&quot;</span>, fn);</span><br><span class="line">bus.<span class="title function_">on</span>(<span class="string">&quot;test&quot;</span>, <span class="function">(<span class="params">word</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我要展示这个世界：&quot;</span>, word));</span><br><span class="line">bus.<span class="title function_">on</span>(<span class="string">&quot;test&quot;</span>, fn);</span><br><span class="line">bus.<span class="title function_">on</span>(<span class="string">&quot;test&quot;</span>, fn);</span><br><span class="line">bus.<span class="title function_">on</span>(<span class="string">&quot;getList&quot;</span>, <span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;拿到的列表:&quot;</span>, list);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bus.<span class="title function_">off</span>(<span class="string">&quot;test&quot;</span>, fn);</span><br><span class="line">bus.<span class="title function_">emit</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">bus.<span class="title function_">emit</span>(<span class="string">&quot;getList&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<p><img src="//images.weserv.nl/?url=https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202307241811035.png" alt="示例" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>::: tip 碎碎念</p>
<p>本文仅是简单的介绍了发布订阅模式，手写的实现也是模仿事件总线的<strong>api</strong></p>
<p>:::</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>返回顶部</title>
    <url>/2023/10/03/js/%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h1><p>返回顶部的按钮，通常是页面内容超出屏幕内容时，滚动到一定位置后，它就会出现，你可以点击它快速回到顶部</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BackTop</span> &#123;</span><br><span class="line">  style;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">obj = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span> = obj;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> back = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    back.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;back-top&quot;</span>);</span><br><span class="line">    back.<span class="property">innerText</span> = <span class="string">&quot;返回顶部&quot;</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(back.<span class="property">style</span>, &#123;</span><br><span class="line">      <span class="attr">position</span>: <span class="string">&quot;fixed&quot;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&quot;60px&quot;</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="string">&quot;60px&quot;</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="string">&quot;60px&quot;</span>,</span><br><span class="line">      <span class="attr">borderRadius</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&quot;saddlebrown&quot;</span>,</span><br><span class="line">      <span class="attr">textAlign</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">      <span class="attr">lineHeight</span>: <span class="string">&quot;60px&quot;</span>,</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="string">&quot;12px&quot;</span>,</span><br><span class="line">      <span class="attr">cursor</span>: <span class="string">&quot;pointer&quot;</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;white&quot;</span>,</span><br><span class="line">      <span class="attr">display</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      ...<span class="variable language_">this</span>.<span class="property">style</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    back.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">returnTop</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(back);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> scrollTop =</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">      <span class="keyword">if</span> (scrollTop &gt; <span class="number">300</span>) &#123;</span><br><span class="line">        back.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        back.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> back;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">returnTop</span>(<span class="params">num = <span class="number">50</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="number">0</span>;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> top = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">      <span class="keyword">if</span> (top &gt; num) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> =</span><br><span class="line">          top - num;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有内置样式，当然你也可以使用时单独传递样式，不过上面代码还存在一些问题，你能发现吗</p>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>简单使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> back = <span class="keyword">new</span> <span class="title class_">BackTop</span>();</span><br><span class="line">back.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>

<p>实现效果</p>
<p><img src="//images.weserv.nl/?url=https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202307241449451.png" alt="image-20230712200517646" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>::: tip 碎碎念</p>
<p>这个返回顶部的实现其实是很简单的，能优化的地方也很多，例如获取滚动高度的方式、丝滑返回顶部的方式，但我为什么没改呢，懒呗</p>
<p>:::</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>hive安装记录</title>
    <url>/2023/10/03/%E7%AC%94%E8%AE%B0/hive%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="hive-安装记录"><a href="#hive-安装记录" class="headerlink" title="hive 安装记录"></a>hive 安装记录</h1><p>hadoop 版本：3.1.3</p>
<p>hive 版本：3.1.2</p>
<p>虚拟机版本：ubuntu16.4</p>
<p>林子雨老师<a href="https://dblab.xmu.edu.cn/blog/2440/">教程</a>中有相应的文件和教程，这里记录的为我安装时遇到的问题</p>
<h2 id="解压-hive-文件"><a href="#解压-hive-文件" class="headerlink" title="解压 hive 文件"></a>解压 hive 文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf ./apache-hive-3.1.2-bin.tar.gz -C /usr/local   # 解压到/usr/local中</span><br><span class="line">sudo tar -zxvf ./apache-hive-3.1.2-bin.tar.gz -C /usr/local # 解压到 /usr/local中</span><br><span class="line">cd /usr/local/</span><br><span class="line">sudo mv apache-hive-3.1.2-bin hive       # 将文件夹名改为hive</span><br><span class="line">sudo chown -R dblab:dblab hive  # 修改文件权限</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，dblab:dblab是用户组和用户名，如果你当前使用用户名hadoop登录了Linux系统，则把dblab替换成hadoop。</span></span><br></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>将下面内容添加的文件内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HIVE_HOME=/usr/local/hive</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/local/hadoop</span><br><span class="line"><span class="comment"># 文件目录需要根据实际安装目录来确定，且如果PATH已经存在，就在原有PATH加上:$HIVE_HOME/bin，上述的PATH就不需要了</span></span><br></pre></td></tr></table></figure>

<p>更新环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="修改-hive-配置文件"><a href="#修改-hive-配置文件" class="headerlink" title="修改 hive 配置文件"></a>修改 hive 配置文件</h2><p>执行如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hive/conf</span><br><span class="line">mv hive-default.xml.template hive-default.xml</span><br><span class="line">vim hive-site.xml</span><br></pre></td></tr></table></figure>

<p>在 hive-site.xml 中添加如下配置信息：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="安装并配置-mysql"><a href="#安装并配置-mysql" class="headerlink" title="安装并配置 mysql"></a>安装并配置 mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server # 我的虚拟机版本安装时会提示我设置密码</span><br><span class="line">tar -zxvf mysql-connector-java-5.1.40.tar.gz   #解压jdbc包</span><br><span class="line">cp mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar  /usr/local/hive/lib #将mysql-connector-java-5.1.40-bin.jar拷贝到/usr/local/hive/lib目录下</span><br><span class="line">service mysql start # 启动mysql服务</span><br><span class="line"> mysql -u root -p  #登陆shell界面</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database hive;    #这个hive数据库与hive<span class="operator">-</span>site.xml中localhost:<span class="number">3306</span><span class="operator">/</span>hive的hive对应，用来保存hive元数据</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> hive<span class="variable">@localhost</span> identified <span class="keyword">by</span> <span class="string">&#x27;hive&#x27;</span>;   #将所有数据库的所有表的所有权限赋给hive用户，后面的hive是配置hive<span class="operator">-</span>site.xml中配置的连接密码</span><br><span class="line">mysql<span class="operator">&gt;</span> flush privileges;  #刷新mysql系统权限关系表</span><br></pre></td></tr></table></figure>

<h2 id="替换文件-guava-19-0-jar"><a href="#替换文件-guava-19-0-jar" class="headerlink" title="替换文件 guava-19.0.jar"></a>替换文件 guava-19.0.jar</h2><p>因为 hive 和 Hadoop 中都存在这个文件，但是版本不一样，所以用 Hadoop 中的高版本替换 hive 中的 guava-19.0.jar</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hadoop/share/hadoop/common/lib/</span><br><span class="line">cp guava-27.0-jre.jar /usr/local/hive/lib/guava-27.0-jre.jar</span><br></pre></td></tr></table></figure>

<h2 id="删除重复的-jar-包"><a href="#删除重复的-jar-包" class="headerlink" title="删除重复的 jar 包"></a>删除重复的 jar 包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm /usr/local/hive/lib/log4j-slf4j-impl-2.10.0.jar</span><br></pre></td></tr></table></figure>

<h2 id="禁止-hive-命令执行时的提示"><a href="#禁止-hive-命令执行时的提示" class="headerlink" title="禁止 hive 命令执行时的提示"></a>禁止 hive 命令执行时的提示</h2><p>1、在 hive 安装目录下的 conf 目录下新建 log4j.properties 日志配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hive/conf</span><br><span class="line">touch log4j.properties</span><br><span class="line">vim log4j.properties # 编辑文件</span><br></pre></td></tr></table></figure>

<p>2、添加内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger=WARN, CA</span><br><span class="line">log4j.appender.CA=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CA.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CA.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n</span><br><span class="line"># 原文链接：https://blog.csdn.net/young_0609/article/details/122620852</span><br></pre></td></tr></table></figure>

<h2 id="初始化-metastore"><a href="#初始化-metastore" class="headerlink" title="初始化 metastore"></a>初始化 metastore</h2><p>在运行 hive 时会报<strong>Version information not found in metastore</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>

<h2 id="运行-hive"><a href="#运行-hive" class="headerlink" title="运行 hive"></a>运行 hive</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh localhost # 开启ssh</span><br><span class="line">cd /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh # 开启hadoop服务</span><br><span class="line">hive # 运行hive</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hive</category>
      </categories>
  </entry>
  <entry>
    <title>通过miniVue浅析vue3核心</title>
    <url>/2023/10/02/vue/%E9%80%9A%E8%BF%87miniVue%E6%B5%85%E6%9E%90vue3%E6%A0%B8%E5%BF%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="通过-miniVue-浅析-vue3-核心"><a href="#通过-miniVue-浅析-vue3-核心" class="headerlink" title="通过 miniVue 浅析 vue3 核心"></a>通过 miniVue 浅析 vue3 核心</h1><p>本文属于学习中的记录，不一定对，miniVue 来源是 codewhy 课堂学习（侵删）</p>
<h2 id="一、了解-vue3"><a href="#一、了解-vue3" class="headerlink" title="一、了解 vue3"></a>一、了解 vue3</h2><h3 id="1、渲染模块"><a href="#1、渲染模块" class="headerlink" title="1、渲染模块"></a>1、渲染模块</h3><p>vue 中有一个<strong>h</strong>函数，是用于创建虚拟 DOM 节点（vnode）的,还有一个<strong>render</strong>函数，是用于编程式地创建组件虚拟 DOM 树的函数，两个函数配合就能替代<strong>template</strong>的功能，当然<strong>render</strong>与<strong>JSX</strong>配合也能实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, <span class="variable language_">this</span>.<span class="property">msg</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以上代码来自<a href="https://cn.vuejs.org/guide/extras/render-function.html">vue 官网</a></p>
<h3 id="2、响应式模块"><a href="#2、响应式模块" class="headerlink" title="2、响应式模块"></a>2、响应式模块</h3><p>我们都知道<strong>vue3</strong>的响应式较于<strong>vue2</strong>的变化是实现响应式的方法不同，<strong>vue2</strong>是使用对象的<strong>defineProperty</strong>实现的，这种方式有几个麻烦的点</p>
<ul>
<li>无法监听数组的变化</li>
<li>必须遍历对象每个属性</li>
<li>必须深层遍历嵌套的对象</li>
<li>无法监听对象新增的属性，在 vue2 中是使用**$set**方法来再次监听</li>
</ul>
<p>而<strong>vue3</strong>的<strong>proxy</strong>代理就很好的弥补了上面那些缺点，在<strong>vue3</strong>中是使用<strong>reactive</strong>和<strong>ref</strong>方法来生成响应式数据</p>
<ul>
<li><p><strong>ref</strong>能够代理所有的数据，但是代理的数据只能通过**.value**的方式拿值，因为数据还有包裹些别的属性</p>
</li>
<li><p>reactive 是只能够代理引用数据类型的数据，因为返回的是直接代理的数据，没有再处理和包裹</p>
</li>
</ul>
<p>当然<strong>vue3</strong>还有编译模块和别的，但是要实现<strong>miniVue</strong>知道两个就够了，编译模块比较麻烦</p>
<h2 id="二、miniVue"><a href="#二、miniVue" class="headerlink" title="二、miniVue"></a>二、miniVue</h2><h3 id="1、h-函数"><a href="#1、h-函数" class="headerlink" title="1、h 函数"></a>1、h 函数</h3><p>我们通过上面的内容知道<strong>h</strong>函数是返回一个虚拟 DOM 节点的（vnode），它有三个参数</p>
<ul>
<li><strong>type</strong>标签类型，也可以是组件对象</li>
<li><strong>props</strong>可选参数，标签上的<strong>attribute</strong>（属性）</li>
<li><strong>children</strong>可选参数，子节点</li>
</ul>
<p>有了这三个参数我们就能生成<strong>vonde</strong>，那什么是<strong>vnode</strong>呢</p>
<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202304040950637.png" alt="image-20230404095057585" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>我们能看到<strong>h</strong>函数返回的是一个对象，对象中有 type、props、children，这样我们自己就可以编写一个<strong>h</strong>函数了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成虚拟dom（js对象）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; tag 节点类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; props 虚拟节点的属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String,Array</span>&#125; children 子节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">h</span> = (<span class="params">tag, props, children</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tag,</span><br><span class="line">    props,</span><br><span class="line">    children,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们这里简化了<strong>h</strong>函数，实际的要比这复杂的多，但用于实现简单功能这就够了</p>
<h3 id="2、mount-函数"><a href="#2、mount-函数" class="headerlink" title="2、mount 函数"></a>2、mount 函数</h3><p>mount 函数功能是将虚拟 DOM 节点转换成真实 DOM 的，有两个参数<strong>vnode</strong>、<strong>container</strong>（真实的 node）</p>
<p>由上面实现的<strong>h</strong>函数我们可以知道，<strong>vonde</strong>就是一个对象里面有<strong>tag(<strong>标签)、</strong>props</strong>(属性)、<strong>children</strong>(子节点)这三个属性，通过<strong>tag</strong>我们能够创建一个真实的 DOM 节点，并且将<strong>props</strong>设置成其属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; tag, props, children &#125; = vnode;</span><br><span class="line"><span class="comment">// 1.创建真实元素，并且在vnode上保留</span></span><br><span class="line"><span class="keyword">const</span> el = (vnode.<span class="property">el</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(tag));</span><br><span class="line"><span class="comment">// 2.判断props，设置att</span></span><br><span class="line"><span class="keyword">if</span> (props) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = props[key];</span><br><span class="line">    <span class="keyword">if</span> (key.<span class="title function_">startsWith</span>(<span class="string">&quot;on&quot;</span>)) &#123;</span><br><span class="line">      el.<span class="title function_">addEventListener</span>(key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLocaleLowerCase</span>(), value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el.<span class="title function_">setAttribute</span>(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成了上面的事情，我们得到了一个真实的 node 并成功为其设置了属性，接下来要做的是处理<strong>children</strong>，分两种情况，第一种是字符串，那我们直接将得到的 node 的<strong>textContent</strong>设置成<strong>children</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">el.<span class="property">textContent</span> = children;</span><br></pre></td></tr></table></figure>

<p>如果是一个<strong>vnode</strong>那我们递归调用这个处理<strong>vnode</strong>的 mount,只不过<strong>container</strong>要变成刚得到的 node，由于子节点可以是多个，所以是数组，我们这里遍历数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">children.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mount</span>(element, el);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最后就是将<strong>node</strong>挂载到 DOM 树上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">container.<span class="title function_">appendChild</span>(el);</span><br></pre></td></tr></table></figure>

<p>至此 mount 函数的功能就已经完成了，完整代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 挂载虚拟节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; vnode 虚拟节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; container 真实的dom节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mount</span> = (<span class="params">vnode, container</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; tag, props, children &#125; = vnode;</span><br><span class="line">  <span class="comment">// 1.创建真实元素，并且在vnode上保留</span></span><br><span class="line">  <span class="keyword">const</span> el = (vnode.<span class="property">el</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(tag));</span><br><span class="line">  <span class="comment">// 2.判断props，设置att</span></span><br><span class="line">  <span class="keyword">if</span> (props) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = props[key];</span><br><span class="line">      <span class="keyword">if</span> (key.<span class="title function_">startsWith</span>(<span class="string">&quot;on&quot;</span>)) &#123;</span><br><span class="line">        el.<span class="title function_">addEventListener</span>(key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLocaleLowerCase</span>(), value);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.<span class="title function_">setAttribute</span>(key, value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3.判断children</span></span><br><span class="line">  <span class="keyword">if</span> (children) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> children === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      el.<span class="property">textContent</span> = children;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      children.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">mount</span>(element, el);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4.将虚拟dom挂载在真实dom上</span></span><br><span class="line">  container.<span class="title function_">appendChild</span>(el);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202304041250150.png" alt="image-20230404125048086" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="3、patch-函数"><a href="#3、patch-函数" class="headerlink" title="3、patch 函数"></a>3、patch 函数</h3><p>patch 函数的功能是对<strong>diff</strong>算法的简单模拟，主要比对两个虚拟 DOM 节点是否有变化，有变化则更新，主要参数是<strong>oldNode</strong>(旧节点)、<strong>newNode</strong>（新节点）</p>
<p>1.两个节点的 tag 不一致，这种情况比较简单，直接拿到节点的父节点然后暴力替换就好了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (n1.<span class="property">tag</span> !== n2.<span class="property">tag</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> preEl = el.<span class="property">parentElement</span>;</span><br><span class="line">  preEl.<span class="title function_">removeChild</span>(n1.<span class="property">el</span>);</span><br><span class="line">  <span class="title function_">mount</span>(n2, preEl);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.两个节点一致，那我们就需要先处理 props</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2、处理props</span></span><br><span class="line"><span class="keyword">const</span> oldProps = n1.<span class="property">props</span> || &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> newProps = n2.<span class="property">props</span> || &#123;&#125;;</span><br><span class="line"><span class="comment">// 2.1 获取所有新的props，与旧的不一致的就添加上</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> newProps) &#123;</span><br><span class="line">  <span class="keyword">const</span> oldValue = oldProps[key];</span><br><span class="line">  <span class="keyword">const</span> newValue = newProps[key];</span><br><span class="line">  <span class="keyword">if</span> (oldValue !== newValue) &#123;</span><br><span class="line">    <span class="comment">// 如果newProps中的属性的值和oldProps中的不一致那么便更新</span></span><br><span class="line">    <span class="keyword">if</span> (key.<span class="title function_">startsWith</span>(<span class="string">&quot;on&quot;</span>)) &#123;</span><br><span class="line">      el.<span class="title function_">removeEventListener</span>(key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLocaleLowerCase</span>(), oldValue); <span class="comment">// js中函数是引用类型，每次声明地址都不一样，所以需要先取消监听</span></span><br><span class="line">      el.<span class="title function_">addEventListener</span>(key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLocaleLowerCase</span>(), newValue);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el.<span class="title function_">setAttribute</span>(key, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.2删除旧的没有的props</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> oldProps) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(key <span class="keyword">in</span> newProps)) &#123;</span><br><span class="line">    <span class="comment">// 如果oldProps中有newProps中没有的属性就删除</span></span><br><span class="line">    <span class="keyword">if</span> (key.<span class="title function_">startsWith</span>(<span class="string">&quot;on&quot;</span>)) &#123;</span><br><span class="line">      el.<span class="title function_">removeEventListener</span>(key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLocaleLowerCase</span>(), oldProps[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el.<span class="title function_">removeAttribute</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.接着就是处理<strong>children</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3、处理children</span></span><br><span class="line"><span class="keyword">const</span> oldChildren = n1.<span class="property">children</span> || [];</span><br><span class="line"><span class="keyword">const</span> newChildren = n2.<span class="property">children</span> || [];</span><br><span class="line"><span class="comment">// 3.1 新的children是字符串时直接替换</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> newChildren === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> oldChildren === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    oldChildren !== newChildren ? (el.<span class="property">textContent</span> = newChildren) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    el.<span class="property">innerHTML</span> = newChildren;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 3.2 新的children是数组</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> oldChildren === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    el.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    newChildren.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">mount</span>(item, el));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> commonLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(oldChildren.<span class="property">length</span>, newChildren.<span class="property">length</span>); <span class="comment">// 找到最小的一个长度，处理两个节点相同长度部分的子节点</span></span><br><span class="line">    <span class="comment">// 3.2.2 替换数组长度一致的部分的内容</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span><br><span class="line">      <span class="title function_">patch</span>(oldChildren[i], newChildren[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.2.3 oldChildren &gt; newChildren</span></span><br><span class="line">    <span class="keyword">if</span> (oldChildren.<span class="property">length</span> &gt; newChildren.<span class="property">length</span>) &#123;</span><br><span class="line">      oldChildren.<span class="title function_">slice</span>(commonLength).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        el.<span class="title function_">removeChild</span>(item.<span class="property">el</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.2.4 oldChildren &lt; newChildren</span></span><br><span class="line">    <span class="keyword">if</span> (newChildren.<span class="property">length</span> &gt; oldChildren.<span class="property">length</span>) &#123;</span><br><span class="line">      newChildren.<span class="title function_">slice</span>(commonLength).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">mount</span>(item, el);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码是较为简单的比较，子节点长度一致的部分是利用之前实现的<strong>patch</strong>做一个替换，长度不一致主要就是删除多的，添加新的，当然还有<strong>n1.children</strong>是字符串而<strong>n2.children</strong>是数组的情况也做了单独处理，但实际上还有很多边界情况没有处理，有机会可以继续完善，完整代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对比两个节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; n1 旧的虚拟节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; n2 新的虚拟节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">patch</span> = (<span class="params">n1, n2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> el = (n2.<span class="property">el</span> = n1.<span class="property">el</span>);</span><br><span class="line">  <span class="comment">// 1、对比tag类型是否一致</span></span><br><span class="line">  <span class="keyword">if</span> (n1.<span class="property">tag</span> !== n2.<span class="property">tag</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> preEl = el.<span class="property">parentElement</span>;</span><br><span class="line">    preEl.<span class="title function_">removeChild</span>(n1.<span class="property">el</span>);</span><br><span class="line">    <span class="title function_">mount</span>(n2, preEl);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、处理props</span></span><br><span class="line">  <span class="keyword">const</span> oldProps = n1.<span class="property">props</span> || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> newProps = n2.<span class="property">props</span> || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 2.1 获取所有新的props，与旧的不一致的就添加上</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> newProps) &#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = oldProps[key];</span><br><span class="line">    <span class="keyword">const</span> newValue = newProps[key];</span><br><span class="line">    <span class="keyword">if</span> (oldValue !== newValue) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key.<span class="title function_">startsWith</span>(<span class="string">&quot;on&quot;</span>)) &#123;</span><br><span class="line">        el.<span class="title function_">removeEventListener</span>(key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLocaleLowerCase</span>(), oldValue);</span><br><span class="line">        el.<span class="title function_">addEventListener</span>(key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLocaleLowerCase</span>(), newValue);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.<span class="title function_">setAttribute</span>(key, newValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.2删除旧的没有的props</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> oldProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> newProps)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key.<span class="title function_">startsWith</span>(<span class="string">&quot;on&quot;</span>)) &#123;</span><br><span class="line">        el.<span class="title function_">removeEventListener</span>(key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLocaleLowerCase</span>(), oldProps[key]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.<span class="title function_">removeAttribute</span>(key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、处理children</span></span><br><span class="line">  <span class="keyword">const</span> oldChildren = n1.<span class="property">children</span> || [];</span><br><span class="line">  <span class="keyword">const</span> newChildren = n2.<span class="property">children</span> || [];</span><br><span class="line">  <span class="comment">// 3.1 新的children是字符串时直接替换</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> newChildren === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> oldChildren === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      oldChildren !== newChildren ? (el.<span class="property">textContent</span> = newChildren) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el.<span class="property">innerHTML</span> = newChildren;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 3.2 新的children是数组</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> oldChildren === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      el.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      newChildren.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">mount</span>(item, el));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> commonLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(oldChildren.<span class="property">length</span>, newChildren.<span class="property">length</span>);</span><br><span class="line">      <span class="comment">// 3.2.2 替换数组长度一致的部分的内容</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span><br><span class="line">        <span class="title function_">patch</span>(oldChildren[i], newChildren[i]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3.2.3 oldChildren &gt; newChildren</span></span><br><span class="line">      <span class="keyword">if</span> (oldChildren.<span class="property">length</span> &gt; newChildren.<span class="property">length</span>) &#123;</span><br><span class="line">        oldChildren.<span class="title function_">slice</span>(commonLength).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          el.<span class="title function_">removeChild</span>(item.<span class="property">el</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3.2.4 oldChildren &lt; newChildren</span></span><br><span class="line">      <span class="keyword">if</span> (newChildren.<span class="property">length</span> &gt; oldChildren.<span class="property">length</span>) &#123;</span><br><span class="line">        newChildren.<span class="title function_">slice</span>(commonLength).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">mount</span>(item, el);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>至此完成了 miniVue 的渲染模块，接下来是响应式的模块，vue 的响应式重要的就在于<strong>依赖收集</strong>，老师的 miniVue 简单的实现了<strong>Dep</strong>类，用来收集依赖，订阅和通知</p>
<h3 id="4、Dep-类（收集依赖）"><a href="#4、Dep-类（收集依赖）" class="headerlink" title="4、Dep 类（收集依赖）"></a>4、Dep 类（收集依赖）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> activeEffect = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subscribe</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 收集依赖</span></span><br><span class="line">  <span class="title function_">depend</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeEffect) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscribe</span>.<span class="title function_">add</span>(activeEffect);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subscribe</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effcet</span>) =&gt;</span> <span class="title function_">effcet</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>关于React和Vue3中封装通用组件的一些想法</title>
    <url>/2023/12/31/%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8EReact%E5%92%8CVue3%E4%B8%AD%E5%B0%81%E8%A3%85%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="关于-React-和-Vue3-中封装通用组件的一些想法"><a href="#关于-React-和-Vue3-中封装通用组件的一些想法" class="headerlink" title="关于 React 和 Vue3 中封装通用组件的一些想法"></a>关于 React 和 Vue3 中封装通用组件的一些想法</h1><p>在我们平时开发时不管 <strong>React</strong> 还是 <strong>Vue</strong> 都会使用一些 <strong>UI</strong> 框架来帮助我们快速搭建页面，我们在使用时会习惯对这些 <strong>UI</strong> 框架做进一步封装，目的是为了：</p>
<ul>
<li><p>降低 <strong>UI</strong> 框架对项目的影响，避免框架组件 <strong>API</strong> 更改后整个项目都需要变动</p>
</li>
<li><p>提高复用性和易用性，将框架组件必须但基础的配置统一配置</p>
</li>
<li><p>能根据配置生成项目需要的组件</p>
</li>
</ul>
<p>下面我以封装一个通用的 <strong>form</strong> 表单为例来讲述我组件封装的思想，仅代表我个人，且是我现阶段想到的方式，也许自己以后会觉得这种方式很蠢也说不一定</p>
<p>对了，做一些基础说明 <strong>Vue</strong> 的 <strong>UI</strong> 框架使用的是 <strong>Element-Plus</strong>,<strong>React</strong> 中的是 <strong>Ant Design</strong>，其中 <strong>Vue</strong> 未使用 <strong>setup</strong> 语法糖，而是类似 <strong>Options API</strong> 的方式，不过基本思想差别不大</p>
<h2 id="一、VUE-中封装组件"><a href="#一、VUE-中封装组件" class="headerlink" title="一、VUE 中封装组件"></a>一、VUE 中封装组件</h2><h3 id="1、封装组件"><a href="#1、封装组件" class="headerlink" title="1、封装组件"></a>1、封装组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-form&quot;&gt;</span><br><span class="line">    &lt;el-form :label-width=&quot;labelWidth&quot;&gt;</span><br><span class="line">      &lt;el-row&gt;</span><br><span class="line">        &lt;template v-for=&quot;item in formItems&quot; :key=&quot;item.label&quot;&gt;</span><br><span class="line">          &lt;el-col v-bind=&quot;colLayout&quot;&gt;</span><br><span class="line">            &lt;template v-if=&quot;item.type === &#x27;text&#x27;&quot;&gt;</span><br><span class="line">              &lt;el-form-item</span><br><span class="line">                :label=&quot;item.label&quot;</span><br><span class="line">                v-bind=&quot;item.itemConfig&quot;</span><br><span class="line">                :style=&quot;itemStyle&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &lt;el-input</span><br><span class="line">                  :placeholder=&quot;item.placeholder&quot;</span><br><span class="line">                  v-model=&quot;modelField[`$&#123;item.field&#125;`]&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-else-if=&quot;item.type === &#x27;date&#x27;&quot;&gt;</span><br><span class="line">              &lt;el-form-item :label=&quot;item.label&quot; :style=&quot;itemStyle&quot;&gt;</span><br><span class="line">                &lt;el-date-picker</span><br><span class="line">                  v-bind=&quot;item.itemConfig&quot;</span><br><span class="line">                  v-model=&quot;modelField[`$&#123;item.field&#125;`]&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-else-if=&quot;item.type === &#x27;select&#x27;&quot;&gt;</span><br><span class="line">              &lt;el-form-item</span><br><span class="line">                :label=&quot;item.label&quot;</span><br><span class="line">                v-bind=&quot;item.itemConfig&quot;</span><br><span class="line">                :style=&quot;itemStyle&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &lt;el-select</span><br><span class="line">                  style=&quot;width: 100%&quot;</span><br><span class="line">                  :placeholder=&quot;item.placeholder&quot;</span><br><span class="line">                  v-model=&quot;modelField[`$&#123;item.field&#125;`]&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                  &lt;el-option</span><br><span class="line">                    v-for=&quot;option in item.options&quot;</span><br><span class="line">                    :key=&quot;option.value&quot;</span><br><span class="line">                    :value=&quot;option.value&quot;</span><br><span class="line">                    &gt;&#123;&#123; option.label &#125;&#125;&lt;/el-option</span><br><span class="line">                  &gt;</span><br><span class="line">                &lt;/el-select&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">    &lt;slot name=&quot;foot&quot;&gt; &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent, PropType, ref, watch &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; IFormItem &#125; from &quot;../index&quot;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    modelValue: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">    &#125;,</span><br><span class="line">    formItems: &#123;</span><br><span class="line">      type: Array as PropType&lt;IFormItem[]&gt;,</span><br><span class="line">      default: () =&gt; [],</span><br><span class="line">    &#125;,</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; (&#123;</span><br><span class="line">        padding: &quot;10px 30px&quot;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">    colLayout: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; (&#123;</span><br><span class="line">        xl: 6,</span><br><span class="line">        lg: 12,</span><br><span class="line">        md: 18,</span><br><span class="line">        sm: 24,</span><br><span class="line">        xs: 24,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">    labelWidth: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;100px&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  emits: [&quot;update:modelValue&quot;],</span><br><span class="line">  setup(props, &#123; emit &#125;) &#123;</span><br><span class="line">    const modelField: any = ref(&#123;</span><br><span class="line">      ...props.modelValue,</span><br><span class="line">    &#125;);</span><br><span class="line">    watch(</span><br><span class="line">      modelField,</span><br><span class="line">      (newVal) =&gt; &#123;</span><br><span class="line">        emit(&quot;update:modelValue&quot;, newVal);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; deep: true &#125;</span><br><span class="line">    );</span><br><span class="line">    return &#123;</span><br><span class="line">      modelField,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> itemType = <span class="string">&quot;text&quot;</span> | <span class="string">&quot;select&quot;</span> | <span class="string">&quot;date&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ISelectOption</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IFormItem</span> &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">type</span>: itemType;</span><br><span class="line">  <span class="attr">field</span>: <span class="built_in">string</span>;</span><br><span class="line">  placeholder?: <span class="built_in">string</span>;</span><br><span class="line">  options?: <span class="title class_">ISelectOption</span>[];</span><br><span class="line">  itemConfig?: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IForm</span> &#123;</span><br><span class="line">  <span class="attr">formItems</span>: <span class="title class_">IFormItem</span>[];</span><br><span class="line">  labelWidth?: <span class="built_in">string</span>;</span><br><span class="line">  itemStyle?: <span class="built_in">any</span>;</span><br><span class="line">  colLayout?: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fromConfig</span>: <span class="title class_">IForm</span> = &#123;</span><br><span class="line">  <span class="attr">labelWidth</span>: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">  <span class="attr">formItems</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;商品名&quot;</span>,</span><br><span class="line">      <span class="attr">field</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;更新时间&quot;</span>,</span><br><span class="line">      <span class="attr">field</span>: <span class="string">&quot;updateAt&quot;</span>,</span><br><span class="line">      <span class="attr">itemConfig</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;daterange&quot;</span>,</span><br><span class="line">        <span class="attr">startPlaceholder</span>: <span class="string">&quot;开始时间&quot;</span>,</span><br><span class="line">        <span class="attr">endPlaceholder</span>: <span class="string">&quot;结束时间&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3、组件的使用"><a href="#3、组件的使用" class="headerlink" title="3、组件的使用"></a>3、组件的使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;page-search&quot;&gt;</span><br><span class="line">    &lt;!-- 使用 form 表单 --&gt;</span><br><span class="line">    &lt;my-form v-bind=&quot;fromConfig&quot; v-model=&quot;formData&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; IForm, IFormItem &#125; from &quot;@/components/my-form&quot;;</span><br><span class="line">import &#123; defineComponent, ref, PropType &#125; from &quot;vue&quot;;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    fromConfig: &#123;</span><br><span class="line">      type: Object as PropType&lt;IForm&gt;,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  emits: [&quot;handleReset&quot;, &quot;handleSearch&quot;],</span><br><span class="line">  setup(props, &#123; emit &#125;) &#123;</span><br><span class="line">    const items: IFormItem[] = props.fromConfig.formItems ?? [];</span><br><span class="line">    const pageSearchOrigin: any = &#123;&#125;;</span><br><span class="line">    // 将配置文件需要的字段取出生成存放结果的对象</span><br><span class="line">    for (const item of items) &#123;</span><br><span class="line">      (pageSearchOrigin as any)[item.field] = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    const formData = ref(pageSearchOrigin);</span><br><span class="line">    return &#123;</span><br><span class="line">      formData,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>从上面代码可以看出来 <strong>Vue3</strong> 的 <strong>v-model</strong> 和 <strong>v-bind</strong> 指令非常好用都在 2 的基础上做了升级，也能看出来 <strong>Vue</strong> 通用组件的封装就是将可能会需要的表单项都写出来，然后根据配置文件的类型判断展示哪一项，这样做有一些优点和缺点</p>
<ul>
<li><p>优点：</p>
<ul>
<li><p>使用方便，使用时只需要传入一个配置文件和利用 <strong>v-model</strong> 获取结果即可</p>
</li>
<li><p>风格统一，这样整个项目中表单的组成方式一致，在修改时能减少很大的工作量</p>
</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li><p>使用有门槛，使用时需要对组件内部组成了解，才能写配置文件</p>
</li>
<li><p>增加表单项不方便，如果要增加表单项时必须去到组件内部</p>
</li>
</ul>
</li>
</ul>
<h2 id="二、React-中封装组件"><a href="#二、React-中封装组件" class="headerlink" title="二、React 中封装组件"></a>二、React 中封装组件</h2><h3 id="1、封装组件-1"><a href="#1、封装组件-1" class="headerlink" title="1、封装组件"></a>1、封装组件</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useEffect, useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="variable constant_">FC</span>, <span class="title class_">ReactNode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">FormInstance</span>, <span class="title class_">Row</span>, <span class="title class_">Col</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">IFormOpt</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./type&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AuthCheck</span> <span class="keyword">from</span> <span class="string">&quot;../auth_check&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> &#123;</span><br><span class="line">  children?: <span class="title class_">ReactNode</span>;</span><br><span class="line">  form?: <span class="function">(<span class="params">formIns: FormInstance</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">formOpt</span>: <span class="title class_">IFormOpt</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 表单项排列方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">colspanConfigs</span>: &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span> &#125;;</span><br><span class="line">&#125; = &#123;</span><br><span class="line">  <span class="number">1</span>: &#123;</span><br><span class="line">    <span class="attr">xs</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">sm</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">md</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">lg</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">xl</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">xxl</span>: <span class="number">24</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="attr">xs</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">sm</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">md</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">lg</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">xl</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">xxl</span>: <span class="number">12</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">3</span>: &#123;</span><br><span class="line">    <span class="attr">xs</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">sm</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">md</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">lg</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">xl</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">xxl</span>: <span class="number">8</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">4</span>: &#123;</span><br><span class="line">    <span class="attr">xs</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">sm</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">md</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">lg</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">xl</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">xxl</span>: <span class="number">6</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyFrom</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function">(<span class="params">&#123; form, formOpt, children &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [formIns] = <span class="title class_">Form</span>.<span class="title function_">useForm</span>();</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (form) &#123;</span><br><span class="line">      <span class="title function_">form</span>(formIns);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [formIns]);</span><br><span class="line">  <span class="keyword">const</span> colspan = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = formOpt.<span class="property">colspan</span> || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> colspanConfigs[key];</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">form</span>=<span class="string">&#123;formIns&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">initialValues</span>=<span class="string">&#123;formOpt.initialValues</span> || &#123;&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">layout</span>=<span class="string">&#123;formOpt.layout&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...formOpt.itemLayout</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Row</span> <span class="attr">gutter</span>=<span class="string">&#123;20&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;formOpt.items.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          const colOpt = item.width ? &#123; flex: item.width &#125; : colspan;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">AuthCheck</span> <span class="attr">permission</span>=<span class="string">&#123;item.permission&#125;</span> <span class="attr">key</span>=<span class="string">&#123;item.name</span> || <span class="attr">item.id</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Col</span> &#123;<span class="attr">...colOpt</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">name</span>=<span class="string">&#123;item.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">label</span>=<span class="string">&#123;item.label&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">rules</span>=<span class="string">&#123;item.rules</span> || []&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;item.element&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">AuthCheck</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;children &amp;&amp; <span class="tag">&lt;<span class="name">Col</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">Col</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">MyFrom</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2、配置文件-1"><a href="#2、配置文件-1" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Input</span>, <span class="title class_">Radio</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IFormItem</span> &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  id?: <span class="built_in">string</span>;</span><br><span class="line">  rules?: <span class="title class_">FormRule</span>[];</span><br><span class="line">  width?: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">element</span>: <span class="title class_">ReactNode</span>;</span><br><span class="line">  permission?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IFormOpt</span>&lt;T = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  itemLayout?: &#123;</span><br><span class="line">    labelCol?: <span class="built_in">object</span>;</span><br><span class="line">    wrapperCol?: <span class="built_in">object</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  layout?: <span class="string">&quot;horizontal&quot;</span> | <span class="string">&quot;vertical&quot;</span> | <span class="string">&quot;inline&quot;</span>;</span><br><span class="line">  <span class="attr">items</span>: <span class="title class_">IFormItem</span>[];</span><br><span class="line">  colspan?: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span>;</span><br><span class="line">  initialValues?: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">addStaffFormOpt</span>: <span class="title class_">IFormOpt</span> = &#123;</span><br><span class="line">  <span class="attr">itemLayout</span>: &#123;</span><br><span class="line">    <span class="attr">labelCol</span>: &#123; <span class="attr">span</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">initialValues</span>: &#123; <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;员工姓名&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">      <span class="attr">rules</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;员工姓名不能为空&quot;</span> &#125;],</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工姓名&quot;</span> /&gt;</span></span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;员工性别&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;sex&quot;</span>,</span><br><span class="line">      <span class="attr">rules</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;员工性别不能为空&quot;</span> &#125;],</span><br><span class="line">      <span class="attr">element</span>: (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Radio.Group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">value</span>=<span class="string">&#123;0&#125;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">value</span>=<span class="string">&#123;1&#125;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Radio.Group</span>&gt;</span></span></span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;账号密码&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">      <span class="attr">rules</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;账号密码不能为空&quot;</span> &#125;],</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Input.Password</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号密码&quot;</span> /&gt;</span></span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useFormOpt hook的代码，能够手动修改配置项，模仿useState风格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IFormItem</span>, <span class="title class_">IFormOpt</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/components/my_form/type&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyObject</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/react-app-env&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetFormOpt</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="comment">// 新的表单配置，可以是新的值或者回调函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">  newOpt: Partial&lt;IFormOpt&gt; | ((items: IFormOpt) =&gt; IFormOpt),</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="comment">// 允许传入一些表单项的字段来做剔除它们，这常用于表单配置仅表单项删减时</span></span></span></span><br><span class="line"><span class="params"><span class="function">  excludes?: <span class="built_in">string</span>[]</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UseFormOptReturn</span> = [<span class="attr">formOpt</span>: <span class="title class_">IFormOpt</span>, <span class="attr">setFormOpt</span>: <span class="title class_">SetFormOpt</span>];</span><br><span class="line"><span class="comment">// 排除一些不需要的form表单配置项</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">excludeFormOptItem</span>(<span class="params">items: IFormItem[], exclude: <span class="built_in">string</span>[] = []</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">result</span>: <span class="title class_">IFormItem</span>[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> items) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = item.<span class="property">name</span> || item.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">if</span> (!exclude.<span class="title function_">includes</span>(id!)) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useFormOpt</span>(<span class="params">formOpt: IFormOpt</span>): <span class="title class_">UseFormOptReturn</span> &#123;</span><br><span class="line">  <span class="comment">// 这样能够实现在配置修改时能通知子组件也改变</span></span><br><span class="line">  <span class="keyword">const</span> [opt, setOpt] = useState&lt;<span class="title class_">IFormOpt</span>&gt;(formOpt);</span><br><span class="line">  <span class="comment">// 修改表单配置，可只修改部分</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">setFormOpt</span>: <span class="title class_">SetFormOpt</span> = <span class="function">(<span class="params">newOpt, excludes</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">formOpt</span>: <span class="built_in">any</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> newOpt === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      formOpt = <span class="title function_">newOpt</span>(opt);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      formOpt = newOpt <span class="keyword">as</span> <span class="title class_">IFormOpt</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(excludes)) &#123;</span><br><span class="line">      formOpt.<span class="property">items</span> = <span class="title function_">excludeFormOptItem</span>(opt.<span class="property">items</span>, excludes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setOpt</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, opt, formOpt));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> [opt, setFormOpt];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、组件的使用-1"><a href="#3、组件的使用-1" class="headerlink" title="3、组件的使用"></a>3、组件的使用</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Modal</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="variable constant_">FC</span>, <span class="title class_">ReactNode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyForm</span> <span class="keyword">from</span> <span class="string">&quot;../my_form&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">IFormOpt</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../my_form/type&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">FormInstance</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IMyModal</span> &#123;</span><br><span class="line">  <span class="attr">show</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> &#123;</span><br><span class="line">  children?: <span class="title class_">ReactNode</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  instance?: <span class="function">(<span class="params">ins: IMyModal</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  formOpt?: <span class="title class_">IFormOpt</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyModal</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function">(<span class="params">&#123; title, children, instance, formOpt &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [formIns, setFormIns] = <span class="title class_">React</span>.<span class="property">useState</span>&lt;<span class="title class_">FormInstance</span>&gt;();</span><br><span class="line">  <span class="comment">// 因为antd的form组件在设置默认值时，只在初始化时有效，所以我们需要手动设置</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    formIns?.<span class="title function_">setFieldsValue</span>(formOpt?.<span class="property">initialValues</span>);</span><br><span class="line">  &#125;, [formOpt?.<span class="property">initialValues</span>]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;form-wrapp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 获取实例和传入配置 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;formOpt ? <span class="tag">&lt;<span class="name">MyForm</span> <span class="attr">form</span>=<span class="string">&#123;setFormIns&#125;</span> <span class="attr">formOpt</span>=<span class="string">&#123;formOpt&#125;</span> /&gt;</span> : children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">MyModal</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4、总结-1"><a href="#4、总结-1" class="headerlink" title="4、总结"></a>4、总结</h3><p>从上面代码可以看出来，<strong>React</strong> 封装组件时组件内部结构就比较简单了，因为 <strong>jsx</strong>&#x2F;<strong>tsx</strong> 的独特优势，<strong>React</strong> 能够完全利用函数式编程的思想，随处编写组件使用组件，同样是使用配置文件，但是又有明显的区别</p>
<ul>
<li>优点：<ul>
<li>表单项的输入组件也能包含在配置文件中，并且 <strong>antd</strong> 的 <strong>Form.Item</strong> 组件会自动将输入组件变为受控组件</li>
<li>使用简单，使用时配合 <strong>TS</strong> 的类型提示，能十分轻松的完成表单配置</li>
</ul>
</li>
<li>缺点：<ul>
<li>数据并非响应式，使用时要手动获取</li>
<li>每次编写配置文件时都需要额外的引入需要的组件，虽然也可以封装为一个组件然后传入配置更改，但是这样就失去了函数式编程的灵活性，各有利弊吧</li>
</ul>
</li>
</ul>
<h2 id="三、一些总结"><a href="#三、一些总结" class="headerlink" title="三、一些总结"></a>三、一些总结</h2><p>说起来也好笑， <strong>Vue</strong> 的规则有点多，模版语法、内置指令、插件编写、公共属性编写的方法，其中很多写法都是固定的，刚开始学习时要记忆，便有些吃力，不过学会后使用时就非常轻松。</p>
<p>而 <strong>React</strong> 则全然不同，虽然同样有些规则，但是这些规则和 <strong>JS</strong> 原生规则类似，例如 <strong>useEffect</strong> 中的回调函数不能是异步函数，<strong>useRef</strong> 生成的是一个对象且对象中有个 <strong>current</strong> 属性等，这些都好理解也便于记忆，但是在使用过程中要格外注意的就很多了，数据没有做劫持，那么要手动调用改变数据的函数，还有函数式组件每一次数据更新时函数都会重新执行，那些逻辑复杂耗时的操作也会立即重新执行一遍，这意味着在编写组件时要注意缓存，缓存时又要注意作用域的问题，反正使用起来要注意一堆问题。</p>
<p>不过，虽然 <strong>React</strong> 使用时要注意很多问题，但是只要掌握了这些之后便会习惯并且爱上，因为自由是无价的。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>服务器的基础配置和项目部署</title>
    <url>/2023/10/03/%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%92%8C%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="服务器的基础配置和项目部署"><a href="#服务器的基础配置和项目部署" class="headerlink" title="服务器的基础配置和项目部署"></a>服务器的基础配置和项目部署</h1><h2 id="一、拥有一台服务器"><a href="#一、拥有一台服务器" class="headerlink" title="一、拥有一台服务器"></a>一、拥有一台服务器</h2><h3 id="1、腾讯云"><a href="#1、腾讯云" class="headerlink" title="1、腾讯云"></a>1、腾讯云</h3><h3 id="2、阿里云"><a href="#2、阿里云" class="headerlink" title="2、阿里云"></a>2、阿里云</h3><h3 id="3、华为云"><a href="#3、华为云" class="headerlink" title="3、华为云"></a>3、华为云</h3><h3 id="4、其他云服务器厂商"><a href="#4、其他云服务器厂商" class="headerlink" title="4、其他云服务器厂商"></a>4、其他云服务器厂商</h3><p>本章以华为云为例</p>
<p>注：本文并未使用任何图形化工具，全程命令执行，请酌情观看</p>
<h2 id="二、登录服务器"><a href="#二、登录服务器" class="headerlink" title="二、登录服务器"></a>二、登录服务器</h2><h3 id="1、华为云远程登录工具"><a href="#1、华为云远程登录工具" class="headerlink" title="1、华为云远程登录工具"></a>1、华为云远程登录工具</h3><p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242025607.png" alt="image-20230324202550435" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="2、vscode-使用-Remote-SSH-远程登录"><a href="#2、vscode-使用-Remote-SSH-远程登录" class="headerlink" title="2、vscode 使用 Remote - SSH 远程登录"></a>2、vscode 使用 Remote - SSH 远程登录</h3><p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242032399.png" alt="image-20230324203221309" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>华为云远程登录直接输入密码登录即可，vscode 遇到连接错误也可百度解决，由于不是重点，不在此赘述，文使用华为云远程登录的方式配置</p>
<h2 id="三、安装-nodejs"><a href="#三、安装-nodejs" class="headerlink" title="三、安装 nodejs"></a>三、安装 nodejs</h2><p>安装软件使用的工具：dnf</p>
<ul>
<li><strong>dnf</strong>全称 dandified(时髦的、华丽的) <strong>Yum</strong></li>
<li>是<strong>yum</strong>的下一个版本，也被称之为<strong>yum</strong>的替代品</li>
<li>centos8 自带<strong>dnf</strong></li>
</ul>
<p>检查<strong>dnf</strong>是否可用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf --help</span><br></pre></td></tr></table></figure>

<p>如果我们希望安装一个软件包，可进行如下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搜索软件名</span><br><span class="line">dnf search nodejs</span><br><span class="line"></span><br><span class="line"># 查看软件包信息</span><br><span class="line">dnf info nodejs</span><br><span class="line"></span><br><span class="line"># 安装nodejs</span><br><span class="line">dnf install nodejs -y</span><br><span class="line"></span><br><span class="line"># 查看node是否安装成功和安装的版本</span><br><span class="line">node -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242046199.png" alt="image-20230324204632142" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>由于<strong>dnf</strong>能下载的版本较低，所以我们安装之后还需要进行版本升级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载nodejs版本管理工具</span><br><span class="line">npm install -g n</span><br><span class="line"># 安装最新的lts(最新长期维护版)版本</span><br><span class="line">n install lts</span><br><span class="line">#下载某一版本号node  n 10.16.0</span><br><span class="line">n &lt;version&gt;</span><br><span class="line">#删除某个版本   n  rm 10.16.0</span><br><span class="line">n rm &lt;version&gt;</span><br><span class="line">#输入命令后直接使用上下箭头选择版本</span><br><span class="line">n</span><br></pre></td></tr></table></figure>

<p>如果版本切换不生效，退出重新登录即可</p>
<h2 id="四、安装-mysql"><a href="#四、安装-mysql" class="headerlink" title="四、安装 mysql"></a>四、安装 mysql</h2><h3 id="1、查看是否有mysql-server，centeos7是没有的"><a href="#1、查看是否有mysql-server，centeos7是没有的" class="headerlink" title="1、查看是否有mysql-server，centeos7是没有的"></a>1、查看是否有<strong>mysql-server</strong>，<strong>centeos7</strong>是没有的</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搜索软件名</span><br><span class="line">dnf search mysql-server</span><br><span class="line"></span><br><span class="line"># 查看软件包信息</span><br><span class="line">dnf info mysql-server</span><br><span class="line"></span><br><span class="line"># 安装nodejs</span><br><span class="line">dnf install mysql-server -y</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242106540.png" alt="image-20230324210653487" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242109782.png" alt="安装成功" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="2、启动-mysql-server"><a href="#2、启动-mysql-server" class="headerlink" title="2、启动 mysql-server"></a>2、启动 mysql-server</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启MySQL后台服务</span><br><span class="line">systemctl start mysqld</span><br><span class="line"># 查看MySQL服务 active(running)表示启动成功</span><br><span class="line">systemctl status mysql</span><br><span class="line"># 随着系统一起启动</span><br><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242116560.png" alt="数据库服务启动成功" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="3、配置-mysql-server"><a href="#3、配置-mysql-server" class="headerlink" title="3、配置 mysql-server"></a>3、配置 mysql-server</h3><p>由于<strong>dnf</strong>安装<strong>mysql-server</strong>时并未设置密码，所以我们需要做些配置，方便后面远程连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line"># 接下来会出现一些选项，重点在于选择密码强度，mysql8.0对密码强度要求较高，大概需要特殊字符和数字和大小写字母分别都有</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242122826.png" alt="image-20230324212218745" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>我在<strong>Disallow root login remotely</strong>选择时填了<strong>n</strong>,允许远程访问</p>
<h3 id="4、使用-Navicat-远程连接-MySQL"><a href="#4、使用-Navicat-远程连接-MySQL" class="headerlink" title="4、使用 Navicat 远程连接 MySQL"></a>4、使用 Navicat 远程连接 MySQL</h3><p>有几个重点：</p>
<ul>
<li>服务器的安全组需要加入 3306 的端口</li>
<li>主机需要填服务器的公网 ip</li>
<li>设置 MySQL 的 root 用户接受远程连接</li>
</ul>
<p>进入 mysql 服务，并切换到 mysql 数据库，查看 uesr 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"># 进入mysql数据库</span><br><span class="line">use mysql;</span><br><span class="line"># 查看user表的host、user字段</span><br><span class="line">select host, user from user;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242148184.png" alt="image-20230324214831135" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>默认只能 lcoalhost 本机连接，我们要更改为所有都能连接(酌情配置，此操作有被攻击的风险)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line"># 配置后保险起见，刷新一下</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242150953.png" alt="image-20230324215032915" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>然后就能进行远程连接了，连接名随意</p>
<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242152094.png" alt="image-20230324215210993" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="5、利用-Navicat-进行数据库数据的拷贝"><a href="#5、利用-Navicat-进行数据库数据的拷贝" class="headerlink" title="5、利用 Navicat 进行数据库数据的拷贝"></a>5、利用 Navicat 进行数据库数据的拷贝</h3><h4 id="5-1、转存sql文件"><a href="#5-1、转存sql文件" class="headerlink" title="5.1、转存sql文件"></a>5.1、转存<strong>sql</strong>文件</h4><p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242156366.png" alt="image-20230324215614280" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="5-2、执行sql文件"><a href="#5-2、执行sql文件" class="headerlink" title="5.2、执行sql文件"></a>5.2、执行<strong>sql</strong>文件</h4><p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202303242157793.png" alt="image-20230324215740671" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="五、上传文件到服务器"><a href="#五、上传文件到服务器" class="headerlink" title="五、上传文件到服务器"></a>五、上传文件到服务器</h2><h3 id="1、上传文件"><a href="#1、上传文件" class="headerlink" title="1、上传文件"></a>1、上传文件</h3><p>至此基础环境已经具备了，接下来就可以上传文件让服务器运行</p>
<p>上传文件主要有三种方式</p>
<ul>
<li>使用工具直接拷贝到服务器</li>
<li>将文件上传到<strong>git</strong>仓库，远程服务器再<strong>git clone</strong></li>
<li>使用自动化部署，例如<strong>jenkins</strong></li>
</ul>
<p>本文主要使用上传到 git 仓库的方式</p>
<h3 id="2、将代码上传到自己-Git-仓库，这里以-github-为例"><a href="#2、将代码上传到自己-Git-仓库，这里以-github-为例" class="headerlink" title="2、将代码上传到自己 Git 仓库，这里以 github 为例"></a>2、将代码上传到自己 Git 仓库，这里以 github 为例</h3><ul>
<li>通过填写**.gitignore 文件**忽略一些私人配置文件和 node_moduls</li>
</ul>
<h3 id="3、将代码-clone-到服务器"><a href="#3、将代码-clone-到服务器" class="headerlink" title="3、将代码 clone 到服务器"></a>3、将代码 clone 到服务器</h3><ul>
<li>创建存放代码的文件夹</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入根目录</span><br><span class="line">cd ..</span><br><span class="line"># 安装git工具</span><br><span class="line">dnf install git -y</span><br><span class="line"># 执行clone命令</span><br><span class="line">git clone 仓库地址</span><br><span class="line"># 可能会报错，执行以下命令即可</span><br><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br><span class="line"># 产生原因：一般是这是因为服务器的SSL证书没有经过第三方机构的签署，所以才报错</span><br></pre></td></tr></table></figure>

<h3 id="4、运行代码"><a href="#4、运行代码" class="headerlink" title="4、运行代码"></a>4、运行代码</h3><p>pm2 介绍：</p>
<blockquote>
<p>PM2 是一个用于 Node.js 应用程序的生产过程管理器，具有内置的负载均衡器。它允许您让应用程序永远处于活动状态，在没有停机时间的情况下重新加载它们，并方便执行常见的系统管理任务。</p>
</blockquote>
<p>本文用到的是<strong>pm2</strong> 进程管理，nodejs 项目一直运行，<a href="https://gitee.com/mirrors/pm2">仓库看看</a></p>
<p>介绍完工具后，我们开始在服务器上运行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">npm install</span><br><span class="line"># 启动应用</span><br><span class="line">pm2 start main.js --name 应用名称(自定义)</span><br><span class="line"># 监控应用目录，一旦有文件发生更改就立刻重启应用</span><br><span class="line">pm2 start app.js --watch</span><br><span class="line"># 重启</span><br><span class="line">pm2 restart app_name|app_id|all</span><br><span class="line"># 重载</span><br><span class="line">pm2 reload app_name|app_id|all</span><br><span class="line"># 停止</span><br><span class="line">pm2 stop app_name|app_id|all</span><br><span class="line"># 删除</span><br><span class="line">pm2 delete app_name|app_id|all</span><br><span class="line"># 查看运行状态</span><br><span class="line">pm2 [list|ls|status]</span><br></pre></td></tr></table></figure>

<h2 id="六、结尾"><a href="#六、结尾" class="headerlink" title="六、结尾"></a>六、结尾</h2><h4 id="6-1、vue-react-项目在服务器运行"><a href="#6-1、vue-react-项目在服务器运行" class="headerlink" title="6.1、vue&#x2F;react 项目在服务器运行"></a>6.1、vue&#x2F;react 项目在服务器运行</h4><p>至此便可以将自己的项目部署到服务器，纯前端项目部署时的几种方式</p>
<ul>
<li>使用 node+express 编写一个静态资源服务器，当然其他语言也是可以</li>
<li>部署到 nginx 服务器上，通过设置 conf 配置文件来进行外网访问</li>
<li>部署到 tomcat 服务器上</li>
</ul>
<p>这几种方式都需要一些别的前置知识，要自行补充学习</p>
<h4 id="6-2、别的补充"><a href="#6-2、别的补充" class="headerlink" title="6.2、别的补充"></a>6.2、别的补充</h4><p>使用全命令行的方式进行部署的话，需要对<strong>linux</strong>命令有一些基本的了解，在此贴一篇<strong>linux</strong>常用命令的文章，便于查询和学习，<a href="https://mp.weixin.qq.com/s?__biz=MzI3MjY1ODI2Ng==&mid=2247485996&idx=1&sn=0a08bf2f04eed49542a96cee6928a561&chksm=eb2e7019dc59f90f55b0aaabf7a59a16a4e06bf941beda82e2e61e807da3ca8d4c2e247173ad&scene=27">文章地址</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>移动端网页元素拖拽排序</title>
    <url>/2024/01/01/%E7%AC%94%E8%AE%B0/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%85%83%E7%B4%A0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="移动端网页元素拖拽排序"><a href="#移动端网页元素拖拽排序" class="headerlink" title="移动端网页元素拖拽排序"></a>移动端网页元素拖拽排序</h1><p>最近在用 <strong>vue3</strong> 写一个移动端网页的 <strong>demo</strong> 时涉及到了一个拖拽排序的功能，因为是学习阶段所以没有选择使用第三方库，想自己实现一下。在实现过程中才发现 <strong>PC</strong> 端的 <strong>drag</strong> 相关事件在移动端是无效的，要想实现的话就得使用 <strong>touch</strong> 相关事件。</p>
<p>本文的实现方式直接操作了 <strong>dom</strong> 元素，所以整体实现方式较简单。</p>
<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202401011721843.png" alt="image-20240101172117625" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="让元素移动"><a href="#让元素移动" class="headerlink" title="让元素移动"></a>让元素移动</h2><p>拖拽排序的第一步肯定是让元素能跟随鼠标&#x2F;手指移动而移动了，常用的做法就是 <strong>touchStart</strong> 事件触发时记录一次 <strong>xy</strong> 的位置，在 <strong>touchMove</strong> 事件触发时减去开始的位置来设置元素的位置 。</p>
<p>我的页面设计是按住右边的 <strong>icon</strong> 来拖动整个 <strong>item</strong>，所以拖动事件是绑定到 <strong>icon</strong> 上的，在取目标元素时需要特别注意当前元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  data: &#123; ranking: number; name: string; id: number &#125;;</span><br><span class="line">&#125;&gt;();</span><br><span class="line">const divEl = ref&lt;HTMLDivElement&gt;();</span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  change: [data: any[]];</span><br><span class="line">&#125;&gt;();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;item s-flex&quot; ref=&quot;divEl&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;icon-box&quot;&gt;</span><br><span class="line">      &lt;van-icon name=&quot;clear&quot; color=&quot;#ff0202&quot; size=&quot;24px&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content van-ellipsis&quot;&gt;&#123;&#123; data.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;icon-box&quot;</span><br><span class="line">      @touchstart=&quot;handleTouchStart&quot;</span><br><span class="line">      @touchmove=&quot;handleTouchMove&quot;</span><br><span class="line">      @touchend=&quot;handleTouchEnd&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;van-icon name=&quot;sort&quot; color=&quot;#e9e9e9&quot; size=&quot;24px&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.item &#123;</span><br><span class="line">  height: 44px;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  border-top: 1px solid #f2f2f2;</span><br><span class="line"></span><br><span class="line">  .content &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  .icon-box &#123;</span><br><span class="line">    width: 40px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.move &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  z-index: 9;</span><br><span class="line">  box-shadow: 0px 1px 10px rgba(0, 0, 0, 0.2), 0px -1px 10px rgba(0, 0, 0, 0.2);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>当手指按下时给元素添加一个类名，用来响应用户操作，同时还需要记住当前按下的位置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = defineProps&lt;&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">ranking</span>: <span class="built_in">number</span>; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">id</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line">&#125;&gt;();</span><br><span class="line"><span class="keyword">const</span> divEl = ref&lt;<span class="title class_">HTMLDivElement</span>&gt;();</span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">  <span class="attr">change</span>: [<span class="attr">data</span>: <span class="built_in">any</span>[]];</span><br><span class="line">&#125;&gt;();</span><br><span class="line"><span class="comment">// 本demo只涉及上下的排序，所以只变更Y轴的位置，更改Z轴是为了凸显目标元素</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changePos</span> = (<span class="params">el: HTMLElement, y: <span class="built_in">number</span>, z: <span class="built_in">number</span> = <span class="number">10</span></span>) =&gt; &#123;</span><br><span class="line">  el.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;transform&quot;</span>, <span class="string">`translate3d(0px,<span class="subst">$&#123;y&#125;</span>px,<span class="subst">$&#123;z&#125;</span>px)`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> startY = <span class="number">0</span>,</span><br><span class="line">  distance = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleTouchStart</span> = (<span class="params">e: TouchEvent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> el = divEl.<span class="property">value</span>!;</span><br><span class="line">  el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;move&quot;</span>);</span><br><span class="line">  startY = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">raf</span> = (<span class="params">callback: (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(callback);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>手指按下后随即移动，移动时触发 <strong>touchmove</strong> 事件，该事件完成进行修改元素的位置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleTouchMove</span> = (<span class="params">e: TouchEvent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> el = divEl.<span class="property">value</span>!;</span><br><span class="line">  <span class="comment">// 父级容器，用来更改元素的位置</span></span><br><span class="line">  <span class="keyword">const</span> parentEl = el.<span class="property">parentElement</span>;</span><br><span class="line">  <span class="comment">// 移动的位置</span></span><br><span class="line">  distance = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span> - startY;</span><br><span class="line">  <span class="comment">// 修改位置</span></span><br><span class="line">  <span class="title function_">changePos</span>(el, distance);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>实现了移动之后，再判断移动的方向，然后根据移动了多少距离判断是否需要变更位置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录最后要更改位置的兄弟元素</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">changeEl</span>: <span class="title class_">HTMLDivElement</span> | <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 记录拖动的方向，最后用来决定是将目标元素往前插还是往后插</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">direction</span>: <span class="built_in">string</span> = <span class="string">&quot;up&quot;</span>;</span><br><span class="line"><span class="comment">// 拖动的距离超过目标元素的高才进行移动处理，留了10px的位置</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(distance) &gt;= el.<span class="property">offsetHeight</span> - <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断拖动的方向</span></span><br><span class="line">  <span class="keyword">if</span> (distance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 下一个元素</span></span><br><span class="line">    <span class="keyword">const</span> nextEl = el.<span class="property">nextElementSibling</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">    <span class="keyword">if</span> (nextEl) &#123;</span><br><span class="line">      changeEl = nextEl;</span><br><span class="line">      direction = <span class="string">&quot;down&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 前一个元素</span></span><br><span class="line">    <span class="keyword">const</span> prevEl = el.<span class="property">previousElementSibling</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">    <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">      changeEl = prevEl;</span><br><span class="line">      direction = <span class="string">&quot;up&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (changeEl) &#123;</span><br><span class="line">    changeEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;transition&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> y = changeEl.<span class="property">offsetTop</span>;</span><br><span class="line">    <span class="title function_">changeRanking</span>(el, changeEl);</span><br><span class="line">    <span class="comment">// 如果是往下拖动需要将元素插到下一个同级元素的下一个之前，所以还需要获取一次nextElementSibling</span></span><br><span class="line">    <span class="keyword">const</span> targetEl =</span><br><span class="line">      direction === <span class="string">&quot;up&quot;</span> ? changeEl : changeEl.<span class="property">nextElementSibling</span>;</span><br><span class="line">    <span class="comment">// 将目标元素插入到对应的兄弟元素之前</span></span><br><span class="line">    parentEl?.<span class="title function_">insertBefore</span>(el, targetEl);</span><br><span class="line">    <span class="comment">// 利用flip动画的思想，修改兄弟元素的位置，以此实现动画</span></span><br><span class="line">    <span class="title function_">changePos</span>(changeEl, y - changeEl.<span class="property">offsetTop</span>);</span><br><span class="line">    <span class="comment">// 这个方法能让浏览器在绘制下一帧时执行</span></span><br><span class="line">    <span class="title function_">raf</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      changeEl!.<span class="property">style</span>.<span class="title function_">setProperty</span>(</span><br><span class="line">        <span class="string">&quot;transition&quot;</span>,</span><br><span class="line">        <span class="string">&quot;all 0.5s cubic-bezier(0.1, 0.8, 0.2, 1)&quot;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 恢复兄弟元素的位置，完成flip动画</span></span><br><span class="line">      <span class="title function_">changePos</span>(changeEl!, <span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 重置移动距离和开始位置</span></span><br><span class="line">    distance = <span class="number">0</span>;</span><br><span class="line">    startY = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整的 <strong>touchmove</strong> 事件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">changeRanking</span> = (<span class="params">el1: HTMLDivElement, el2: HTMLDivElement</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rank = el1.<span class="property">dataset</span>.<span class="property">ranking</span>;</span><br><span class="line">  el1.<span class="property">dataset</span>.<span class="property">ranking</span> = el2.<span class="property">dataset</span>.<span class="property">ranking</span>;</span><br><span class="line">  el2.<span class="property">dataset</span>.<span class="property">ranking</span> = rank;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleTouchMove</span> = (<span class="params">e: TouchEvent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> el = divEl.<span class="property">value</span>!;</span><br><span class="line">  <span class="keyword">const</span> parentEl = el.<span class="property">parentElement</span>;</span><br><span class="line">  <span class="keyword">if</span> (!el.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;item&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">  distance = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span> - startY;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">changeEl</span>: <span class="title class_">HTMLDivElement</span> | <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">direction</span>: <span class="built_in">string</span> = <span class="string">&quot;up&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(distance) &gt;= el.<span class="property">offsetHeight</span> - <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断拖动的方向</span></span><br><span class="line">    <span class="keyword">if</span> (distance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> nextEl = el.<span class="property">nextElementSibling</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">      <span class="keyword">if</span> (nextEl) &#123;</span><br><span class="line">        changeEl = nextEl;</span><br><span class="line">        direction = <span class="string">&quot;down&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> prevEl = el.<span class="property">previousElementSibling</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">      <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">        changeEl = prevEl;</span><br><span class="line">        direction = <span class="string">&quot;up&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (changeEl) &#123;</span><br><span class="line">      changeEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;transition&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> y = changeEl.<span class="property">offsetTop</span>;</span><br><span class="line">      <span class="comment">// 实现真正排序的核心原理</span></span><br><span class="line">      <span class="title function_">changeRanking</span>(el, changeEl);</span><br><span class="line">      <span class="keyword">const</span> targetEl =</span><br><span class="line">        direction === <span class="string">&quot;up&quot;</span> ? changeEl : changeEl.<span class="property">nextElementSibling</span>;</span><br><span class="line">      parentEl?.<span class="title function_">insertBefore</span>(el, targetEl);</span><br><span class="line">      <span class="title function_">changePos</span>(changeEl, y - changeEl.<span class="property">offsetTop</span>);</span><br><span class="line">      <span class="title function_">raf</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        changeEl!.<span class="property">style</span>.<span class="title function_">setProperty</span>(</span><br><span class="line">          <span class="string">&quot;transition&quot;</span>,</span><br><span class="line">          <span class="string">&quot;all 0.5s cubic-bezier(0.1, 0.8, 0.2, 1)&quot;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="title function_">changePos</span>(changeEl!, <span class="number">0</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      distance = <span class="number">0</span>;</span><br><span class="line">      startY = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">changePos</span>(el, distance);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>至此完成了拖动排序，但是这样只是完成了 <strong>dom</strong> 树的排序，对于 <strong>vue</strong> 渲染模版所用的数据而言没有丝毫改变，对此我使用的方式是给标签增加属性 <strong>ranking</strong> 和 <strong>id</strong>，但是直接编写的话，<strong>vue</strong> 在进行 <strong>diff</strong> 虚拟 <strong>dom</strong> 时会因为每次移动都不同的 <strong>ranking</strong> 属性而重新生成虚拟 <strong>dom</strong>,所以我选择在元素挂载后再设置 <strong>dataset</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (divEl.<span class="property">value</span>) &#123;</span><br><span class="line">    divEl.<span class="property">value</span>.<span class="property">dataset</span>.<span class="property">ranking</span> = props.<span class="property">data</span>.<span class="property">ranking</span> + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    divEl.<span class="property">value</span>.<span class="property">dataset</span>.<span class="property">id</span> = props.<span class="property">data</span>.<span class="property">id</span> + <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="完成排序"><a href="#完成排序" class="headerlink" title="完成排序"></a>完成排序</h2><p>在排序好 <strong>dom</strong> 树时只需要在松开手指后将修改后的 <strong>id</strong> 与 <strong>ranking</strong> 返回给父组件即可，在父组件更新用于渲染的数据，此时由于我没有在虚拟 <strong>dom</strong> 中使用 <strong>ranking</strong> 而 <strong>id</strong> 没有变化，所以虚拟 <strong>dom</strong> 也不会重新生成</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件 touchend 事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleTouchEnd</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> el = divEl.<span class="property">value</span>!;</span><br><span class="line">  el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;move&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line">  <span class="comment">// 拿到所有的 ranking和id</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> el.<span class="property">parentElement</span>!.<span class="property">children</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dataset = (item <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>).<span class="property">dataset</span>;</span><br><span class="line">    <span class="keyword">if</span> (dataset) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(&#123; <span class="attr">ranking</span>: dataset.<span class="property">ranking</span>, <span class="attr">id</span>: dataset.<span class="property">id</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重置拖动元素的位置</span></span><br><span class="line">  <span class="title function_">changePos</span>(el, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">&quot;change&quot;</span>, result);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件修改元数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">data: <span class="built_in">any</span>[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 将排序结果修改进原数组</span></span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">type</span> = list.<span class="title function_">find</span>(<span class="function">(<span class="params">i: <span class="built_in">any</span></span>) =&gt;</span> i.<span class="property">id</span> === +item.<span class="property">id</span>);</span><br><span class="line">    <span class="keyword">type</span>.<span class="property">ranking</span> = +item.<span class="property">ranking</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一步记录位置，第二步修改位置，第三步找到目标元素要去的位置的后一个兄弟元素，第四步将目标元素 <strong>父元素.insertBefore</strong> 到找到的兄弟元素之前，第五步统计修改后的数据，发送给父组件修改元数据</p>
<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202401011905436.png" alt="image-20240101190537349" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>记一次前端的条件查询</title>
    <url>/2023/12/05/%E7%AC%94%E8%AE%B0/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%89%8D%E7%AB%AF%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="记一次前端的条件查询"><a href="#记一次前端的条件查询" class="headerlink" title="记一次前端的条件查询"></a>记一次前端的条件查询</h1><p>事情是这样的，我最近在做毕业设计，一个后台管理系统题目是基于 React 的员工考评系统的前端开发，我为了给项目增加真实效果同步开发了一套基于 Express 的服务端接口，但是由于学校只给了我们一个多月的时间，所以很多事情从简了，我的毕设目前基本能跑通了。</p>
<p>目前就是在做条件查询，考虑到我没有做分页，数据是一次性查询全部，所以我把条件查询放在了前端，为此我实现了两函数，这也是我要记录的主要内容。</p>
<h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><p>前端如果要做条件查询无非就是利用 <strong>filter</strong> 方法进行过滤，那么如何使用和提高复用就是我要考虑的第一个问题，对此我的思路是将列表和条件传给我，我通过 <strong>filter</strong> 循环列表，然后在循环列表时获取条件的所有键名并利用 <strong>some</strong> 或者 <strong>every</strong> 进行判断，于是我有了如下的函数：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ItemType</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> renderSearchData&lt;T <span class="keyword">extends</span> <span class="title class_">ItemType</span>[]&gt;(</span><br><span class="line">  <span class="attr">list</span>: T,</span><br><span class="line">  <span class="attr">condition</span>: <span class="title class_">Record</span>&lt;keyof T[<span class="built_in">number</span>], <span class="built_in">any</span>&gt;,</span><br><span class="line">  <span class="attr">equals</span>: (keyof T[<span class="built_in">number</span>])[]</span><br><span class="line">): T &#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">filter</span>(<span class="function">(<span class="params">item: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(condition);</span><br><span class="line">    <span class="keyword">return</span> values.<span class="title function_">every</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; keys, value &#125; = res;</span><br><span class="line">      <span class="keyword">let</span> fn = <span class="string">&quot;every&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (keys.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        fn = <span class="string">&quot;some&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> keys[fn](<span class="function">(<span class="params">key: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (equals.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">          <span class="keyword">return</span> item[key] === value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&quot;created&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">timeIsBetween</span>(value[<span class="number">0</span>], value[<span class="number">1</span>], item[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> item[key].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;) <span class="keyword">as</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是在使用时我发现有些字段包括即可，而有些字段需要相等，时间相关的又需要特殊处理，为了处理这类情况我增加了第三个参数</p>
<ul>
<li><strong>list</strong> 需要过滤的列表</li>
<li><strong>condition</strong> 过滤的条件，必须为对象且键值必须为列表项内的键值</li>
<li><strong>equals</strong> 需要判断相等的键名</li>
</ul>
<p>由于时间有限和本课设内的时间字段名统一，所以我在函数中只处理了需要单独判断的情况，时间字段写死了，要处理可以再加一个参数，或者判断是否为数组，不过需要一些边界判断，时间有限我在这里就没有做</p>
<h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>我是在 <strong>React</strong> 中使用的，由于有些表单项会用一个表单项收集几个可能的内容，类似与模糊查询，所以在使用表单收集的字段时，我还需要和列表中的字段进行对应，以下是代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">data: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; searchText, created, sex, deptId &#125; = data;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">params</span>: <span class="built_in">any</span> = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (searchText) &#123;</span><br><span class="line">    params[<span class="string">&quot;searchText&quot;</span>] = &#123;</span><br><span class="line">      <span class="attr">keys</span>:[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;email&quot;</span>,<span class="string">&quot;jobCode&quot;</span>],</span><br><span class="line">      <span class="attr">value</span>:searchText</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 做一些提前的判断能够在后续的代码执行中节约时间，因为少一个字段就会少一遍循环，可能影响微乎其微，但这是个人习惯，可酌情修改</span></span><br><span class="line">  <span class="keyword">if</span> (sex !== -<span class="number">1</span>) &#123;</span><br><span class="line">    params[<span class="string">&quot;sex&quot;</span>] = &#123;</span><br><span class="line">      <span class="attr">keys</span>:[<span class="string">&quot;sex&quot;</span>],</span><br><span class="line">      <span class="attr">value</span>:sex</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (deptId !== -<span class="number">1</span>) &#123;</span><br><span class="line">    params[<span class="string">&quot;deptId&quot;</span>] = &#123;</span><br><span class="line">      <span class="attr">keys</span>:[<span class="string">&quot;deptId&quot;</span>],</span><br><span class="line">      <span class="attr">value</span>:deptId</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (created &amp;&amp; created.<span class="property">length</span>) &#123;</span><br><span class="line">    params[<span class="string">&quot;created&quot;</span>] = &#123;</span><br><span class="line">      <span class="attr">keys</span>:[<span class="string">&quot;created&quot;</span>],</span><br><span class="line">      <span class="attr">value</span>:created</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="title function_">setTableData</span>(<span class="title function_">renderSearchData</span>(tableDataAll, params, [<span class="string">&quot;deptId&quot;</span>, <span class="string">&quot;sex&quot;</span>]));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">setTableData</span>(tableDataAll);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询条件设置为 <code>&#123;       keys:[&quot;created&quot;],       value:created     &#125;</code>这种结构是为了能够更灵活的处理模糊查询</p>
<p>可以看到除了字段相互对应外，我还进行了判空和一些会影响系统正常运行的判断，同时也验证是否有搜索条件，好让列表能够顺利的重新展示全部。但是我一想到整个毕设还有几个条件查询的地方，如果每个地方都这么写那也太麻烦了，而且很不优雅，我要解决这个问题所以就有了第二个函数</p>
<h2 id="查询完全体"><a href="#查询完全体" class="headerlink" title="查询完全体"></a>查询完全体</h2><p>第二个函数主要就是为了能少写一些重复代码和降低使用成本，换言之就是要帮助我在使用时省略判空和恢复查询全部的能力，还有最重要的是将条件字段和列表的字段挨个对应。</p>
<p>虽然判空和恢复查询全部可以通过改造第一个函数实现，但我不想让一个函数太过于复杂，这样过一段时间后会增加函数的阅读难度。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEmpty</span>(<span class="params">target: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (target === <span class="literal">null</span> || target === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (target.<span class="property">constructor</span> === <span class="title class_">Array</span>) <span class="keyword">return</span> target.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (target.<span class="property">constructor</span> === <span class="title class_">Object</span>) <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(target).<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (target.<span class="property">constructor</span> === <span class="title class_">String</span>) <span class="keyword">return</span> target.<span class="title function_">trim</span>() === <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> handleSearch&lt;T <span class="keyword">extends</span> <span class="title class_">ItemType</span>[]&gt;(</span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">any</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;,</span><br><span class="line">  <span class="attr">list</span>: T</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">equls</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">params</span>: <span class="built_in">any</span> = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(condition);</span><br><span class="line">  <span class="keyword">if</span> (keys.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">  keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [kName, isEquls, equlsVal = -<span class="number">1</span>] = condition[key].<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> value = data[kName];</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="title function_">isEmpty</span>(value) ||</span><br><span class="line">      (isEquls === <span class="string">&quot;T&quot;</span> &amp;&amp; value.<span class="property">length</span> === <span class="number">0</span>) ||</span><br><span class="line">      equlsVal == value</span><br><span class="line">    )</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (isEquls === <span class="string">&quot;E&quot;</span>) &#123;</span><br><span class="line">      equls.<span class="title function_">push</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!params[kName]) &#123;</span><br><span class="line">      params[kName] = &#123;</span><br><span class="line">        <span class="attr">keys</span>: [key],</span><br><span class="line">        <span class="attr">value</span>: value,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      params[kName].<span class="property">keys</span>.<span class="title function_">push</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> renderSearchData&lt;T&gt;(list, params, equls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>handleSearch</strong> 函数一样有三个参数，具体含义如下：</p>
<ul>
<li><strong>data</strong> 查询条件</li>
<li><strong>condition</strong> 查询条件和列表字段的对应关系，<strong>key</strong> 为列表的字段，<strong>value</strong> 为查询条件的字段名,<strong>value</strong> 还可以拼接一些条件， <strong>E</strong> 是需要判断相等的字段，然后可以跟上要判断的值，如果没有就默认 -1 ，<strong>T</strong> 是代表时间，会单纯处理</li>
<li><strong>list</strong> 要过滤的列表</li>
</ul>
<p>使用第二个函数进行条件查询时代码可以精简为如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> condition = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;searchText&quot;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&quot;searchText&quot;</span>,</span><br><span class="line">  <span class="attr">jobCode</span>: <span class="string">&quot;searchText&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;sex:E:-1&quot;</span>,</span><br><span class="line">  <span class="attr">deptId</span>: <span class="string">&quot;deptId:E:-1&quot;</span>,</span><br><span class="line">  <span class="attr">created</span>: <span class="string">&quot;created:T&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">data: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setTableData</span>(<span class="title function_">handleSearch</span>(data, condition, tableDataAll))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我这次在前端做条件查询时值得谈论的是在做字段对应时使用的方法，利用字符串拼接完成信息的搭载，这样能简化很多代码，还可以再进一步简化，将对象变为数组，通过字符串拼接的顺序来确定关键字，只是这样代码可读性就会很低了。</p>
<p>当然这两个函数的封装还是有些问题的，一是没有做很详细的边界判断，二是不是很通用，还是以这个毕设为主或者说以我个人风格为主的。</p>
<p><img src="https://gitee.com/jiumuri/images/raw/master/PicGo-updata-img/202311201810546.png" alt="image-20231120181027315" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
</search>
